function plotData(condition,conditionLabels,voltData,...
    xData,yData,zData,xIndex,yIndex,zIndex,xScale,yScale,zScale,Jconv)

% CONDITION     cell of array of propeller data. Each condition is an array of double
% CONDITIONLABELS cell array of strings indicating each condition name
% VOLTDATA      voltage data as loaded in the main file
% XDATA         x array as generated by meshgrid
% YDATA         y array as generated by meshgrid
% ZDATA         z array as generated by griddata
% XINDEX        index of the x-axis as in the main file and the following table
% YINDEX        index of the y-axis as in the main file and the following table
% ZINDEX        index of the z-axis as in the main file and the following table
% XSCALE        scale factor of the x-axis
% XSCALE        scale factor of the y-axis
% XSCALE        scale factor of the z-axis
% JCONV         conversion factor from RPM to J (advance ratio)
%
% Possible values of XINDEX, YINDEX, ZINDEX
%
%   1   Current
%   2   Input (electric) power
%   3   RPM
%   4   Torque
%   5   Output (shaft) power
%   6   Motor efficiency
%
% For values outside the above range this function throws an error.

% Assign correct label to plot
indexArray = [xIndex, yIndex, zIndex];
labelArray = {};
for i = 1:3 % x, y, z
    switch indexArray(i)
        case 1
            labelArray{i} = 'Current, A';
            contourLevels = 20;
        case 2
            labelArray{i} = 'Input (electric) power, W';
            contourLevels = 20;
        case 3
            labelArray{i} = 'RPM';
            contourLevels = 20;
        case 4
            labelArray{i} = 'Torque, Ncm';
            contourLevels = 20;
        case 5
            labelArray{i} = 'Output (shaft) power, W';
            contourLevels = 0:50:700;
        case 6
            labelArray{i} = 'Motor efficiency';
            contourLevels = [5:10:85,85:2:90,90:0.5:95];
        otherwise
            error('Data indices must br between 1 and 6');
    end
end

figure
hold on
surf(xData,yData,zData,'FaceColor','interp','LineStyle','none')
voltagePlot3(voltData,xIndex,yIndex,zIndex,xScale,yScale,zScale)

% Add propeller operating conditions
for i = 1:numel(condition)
    % create a temporary variable to access part of cell data
    tempMat =  condition{i};
    % reorder the temporary array to match XINDEX, YINDEX, ZINDEX
    % CONDITION = [J, SHAFT POWER, RPM, CURRENT, TORQUE, EFFICIENCY];
    tempMat = tempMat(:,[4,5,3,5,2,6]);
    tempMat(:,2) = NaN; % electric power not defined for propeller data
    conditionCurves{i} = plot3(tempMat(:,xIndex),tempMat(:,yIndex),tempMat(:,zIndex)*1.01,...
        '-o','LineWidth',3.0,'MarkerSize',3,'MarkerEdgeColor','black');
end

hold off, grid on, view(-20,30)
xlabel(labelArray{1}), ylabel(labelArray{2}), zlabel(labelArray{3})
colorbar
legend([conditionCurves{:}],conditionLabels,'Location','Best')

% Annotations on surf
annot3(voltData,xIndex,yIndex,zIndex,xScale,yScale,zScale)

for i = 1:numel(condition)
    tempMat =  condition{i};
    tempMat = tempMat(:,[4,5,3,5,2,6]);
    tempMat(:,2) = NaN; % electric power not defined for propeller data
    
    for j = 1:size(tempMat,1)
        text(tempMat(j,xIndex),tempMat(j,yIndex),tempMat(j,zIndex)*1.01,...
            ['T = ',num2str(tempMat(j,1)), ' N \rightarrow'], ...
            'HorizontalAlignment','right')
    end
    
end

% Eventually scale the thick labels
tempLabel = xticklabels;
for i = 1:numel(tempLabel)
    tempLabel{i} = str2double(tempLabel{i}) * xScale;
    tempLabel{i} = num2str(tempLabel{i});
end
xticklabels(tempLabel)

tempLabel = yticklabels;
for i = 1:numel(tempLabel)
    tempLabel{i} = str2double(tempLabel{i}) * yScale;
    tempLabel{i} = num2str(tempLabel{i});
end
yticklabels(tempLabel)

tempLabel = zticklabels;
for i = 1:numel(tempLabel)
    tempLabel{i} = str2double(tempLabel{i}) * zScale;
    tempLabel{i} = num2str(tempLabel{i});
end
zticklabels(tempLabel)

% Contour plot
figure
hold on
[C,H] = contourf(xData,yData,zData,contourLevels);
voltagePlot(voltData,xIndex,yIndex,xScale,yScale)

for i = 1:numel(condition)
    % create a temporary variable to access part of cell data
    tempMat =  condition{i};
    % reorder the temporary array to match XINDEX, YINDEX, ZINDEX
    % CONDITION = [J, SHAFT POWER, RPM, CURRENT, TORQUE, EFFICIENCY];
    tempMat = tempMat(:,[4,5,3,5,2,6]);
    tempMat(:,2) = NaN; % electric power not defined for propeller data
    conditionCurves{i} = plot(tempMat(:,xIndex),tempMat(:,yIndex),...
        'o-','LineWidth',3.0,'MarkerSize',3,'MarkerEdgeColor','black');
end

hold off
clabel(C,H,'FontSize',15)
xlabel(labelArray{1}), ylabel(labelArray{2}), title(labelArray{3})
% colorbar
legend([conditionCurves{:}],conditionLabels,'Location','Best')

% Set two lines for the axis showing RPM and J
if xIndex == 3 % RPM
    
    xticks(0:11);
    xticklabels([]);
    xx = xticks;
    xl = xlim;
    newTickScale = xx(end)/xl(end) / (length(xx)-1);
    for i = 1:length(xx)
        text((i-1)*newTickScale,-0.03,num2str(xx(i)*xScale,'%.0f'),...
            'Units','normalized','HorizontalAlignment','center')
        text((i-1)*newTickScale,-0.08,num2str(Jconv/(xx(i)*xScale),'%.2f'),...
            'Units','normalized','HorizontalAlignment','center')
    end
    text(-0.03,-0.03,'RPM','Units','normalized','HorizontalAlignment','right')
    text(-0.03,-0.08,'J','Units','normalized','HorizontalAlignment','right')
    
else
    
    % Scale the X thick labels
    tempLabel = xticklabels;
    for i = 1:numel(tempLabel)
        tempLabel{i} = str2double(tempLabel{i}) * xScale;
        tempLabel{i} = num2str(tempLabel{i});
    end
    xticklabels(tempLabel)
    
end

% Scale the Y thick labels
tempLabel = yticklabels;
    for i = 1:numel(tempLabel)
        tempLabel{i} = str2double(tempLabel{i}) * yScale;
        tempLabel{i} = num2str(tempLabel{i});
    end
    yticklabels(tempLabel)

% Annotations on contour
annot(voltData,xIndex,yIndex,xScale,yScale)

for i = 1:numel(condition)
    tempMat =  condition{i};
    tempMat = tempMat(:,[4,5,3,5,2,6]);
    tempMat(:,2) = NaN; % electric power not defined for propeller data
    
    for j = 1:size(tempMat,1)
        text(tempMat(j,xIndex),tempMat(j,yIndex),...
            ['T = ',num2str(condition{i}(j,1)), ' N \rightarrow'], ...
            'HorizontalAlignment','right')
    end
    
end

end